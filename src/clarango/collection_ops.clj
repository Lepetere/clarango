(ns clarango.collection-ops
  (:require [clarango.document :as document]))

(defn assoc! ; uses document/create and document/replace-by-key with given key
  "Adds one document (val) to a collection (specified by collection-name) with a given key.
  Always uses the default database set in clarango.core.

  Modeled on core/assoc (http://clojuredocs.org/clojure_core/clojure.core/assoc)
  Does the same, just on an ArangoDB collection. The difference is that you can currently only pass one key and one document
  to add to the collection, not several like in clojure.core/dissoc"
  [collection-name key val]
  nil)

(defn dissoc! ; uses document/delete-by-key
  "Removes a document thats identified by the key parameter from a collection.

  Modeled on core/dissoc (http://clojuredocs.org/clojure_core/clojure.core/dissoc)
  Does the same, just on an ArangoDB collection. The difference is that you can currently only pass one key to remove
  from the collection, not several like in clojure.core/dissoc"
  [collection-name key]
  nil)

(defn conj! ; uses document/create and document/replace-by-key without given key
  "Adds one document (x) to a collection (specified by collection-name). The key for the document is generated by ArangoDB.
  Always uses the default database set in clarango.core.

  Modeled on core/conj (http://clojuredocs.org/clojure_core/clojure.core/conj)
  Does the same, just on an ArangoDB collection. The difference is that you can currently only pass one element to add
  to the collection, not several like in clojure.core/conj"
  [collection-name x]
  nil)

;;; assoc und conj können dieselbe Grundmethode benutzen; der Unterschied ist nur ob der Key vorgegeben ist oder nicht;


;; Frage:

;; was soll der Rückgabewert sein? Wenn jedes mal die ganze Collection zurückgegeben wird, müsste noch
;; eine collection/get-all-documents Anfrage gesendet werden; wäre suboptimal, da extra Request und damit nicht mehr performant;

;; also stellt sich die Frage, ob das ganze Unternehmen überhaupt Sinn macht, da sich die Methoden in zwei 
;; grundsätzlichen Dingen 